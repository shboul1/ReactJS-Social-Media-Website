{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { auth, provider } from '../firebase/firebase';\nimport { useState } from \"react\";\nexport const SocialMediaSignIn = () => {\n  _s();\n\n  const [user, setUser] = useState(null);\n  signInWithPopup(auth, provider).then(result => {\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    let user = result.user;\n    setUser(user);\n    console.log(user);\n  }).catch(error => {\n    console.log(error);\n  });\n};\n\n_s(SocialMediaSignIn, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n\n_c = SocialMediaSignIn;\n\nvar _c;\n\n$RefreshReg$(_c, \"SocialMediaSignIn\");","map":{"version":3,"sources":["C:/Users/i5-10400f/Desktop/react-test/src/components/auth/auth.js"],"names":["getAuth","signInWithPopup","GoogleAuthProvider","auth","provider","useState","SocialMediaSignIn","user","setUser","then","result","credential","credentialFromResult","token","accessToken","console","log","catch","error"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AACA,SAAQC,IAAR,EAAcC,QAAd,QAA6B,sBAA7B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACnC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,IAAD,CAAhC;AACAJ,EAAAA,eAAe,CAACE,IAAD,EAAOC,QAAP,CAAf,CACCK,IADD,CACOC,MAAD,IAAY;AAChB,UAAMC,UAAU,GAAGT,kBAAkB,CAACU,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,UAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB;AACA,QAAIP,IAAI,GAAGG,MAAM,CAACH,IAAlB;AACAC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACD,GAPD,EAOGU,KAPH,CAOUC,KAAD,IAAW;AAClBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD,GATD;AAUD,CAZI;;GAAMZ,iB;;KAAAA,iB","sourcesContent":["import { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport {auth, provider} from '../firebase/firebase'\r\nimport { useState } from \"react\";\r\n\r\nexport const SocialMediaSignIn = () => {\r\n    const [user, setUser] = useState(null)\r\n    signInWithPopup(auth, provider)\r\n    .then((result) => {\r\n      const credential = GoogleAuthProvider.credentialFromResult(result);\r\n      const token = credential.accessToken;\r\n      let user = result.user;\r\n      setUser(user)\r\n      console.log(user)\r\n    }).catch((error) => {\r\n      console.log(error)\r\n    })\r\n  }"]},"metadata":{},"sourceType":"module"}